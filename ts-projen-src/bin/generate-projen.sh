

# Script to capture our Projen project and generate the original Projen skeleton project
# 
# 'projen new typescript'
# 
# TypeScript project.
# 
# Optional:
#       --allow-library-dependencies   Allow the project to include `peerDependencies` and `bundledDependencies` [default: true]                                              [boolean]
#       --artifacts-directory          A directory which will contain build artifacts [default: "dist"]                                                                        [string]
#       --author-email                 Author's e-mail                                                                                                                         [string]
#       --author-name                  Author's name                                                                                                                           [string]
#       --author-organization          Author's Organization                                                                                                                  [boolean]
#       --author-url                   Author's URL / Website                                                                                                                  [string]
#       --auto-approve-upgrades        Automatically approve deps upgrade PRs, allowing them to be merged by mergify (if configued) [default: true]                           [boolean]
#       --auto-detect-bin              Automatically add all executables under the `bin` directory to your `package.json` file under the `bin` section [default: true]        [boolean]
#       --auto-merge                   Enable automatic merging on GitHub [default: true]                                                                                     [boolean]
#       --bugs-email                   The email address to which issues should be reported                                                                                    [string]
#       --bugs-url                     The url to your project's issue tracker                                                                                                 [string]
#       --build-workflow               Define a GitHub workflow for building PRs [default: true if not a subproject]                                                          [boolean]
#       --clobber                      Add a `clobber` task which resets the repo to origin [default: true]                                                                   [boolean]
#       --code-cov                     Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for
#                                      private repos. Configured with @codeCovTokenSecret [default: false]                                                                    [boolean]
#       --code-cov-token-secret        Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories [default: if
#                                      this option is not specified, only public repositories are supported]                                                                   [string]
#       --commit-generated             Whether to commit the managed files by default [default: true]                                                                         [boolean]
#       --copyright-owner              License copyright owner [default: defaults to the value of authorName or "" if `authorName` is undefined]                               [string]
#       --copyright-period             The copyright years to put in the LICENSE file [default: current year]                                                                  [string]
#       --dependabot                   Use dependabot to handle dependency upgrades [default: false]                                                                          [boolean]
#       --deps-upgrade                 Use github workflows to handle dependency upgrades [default: true]                                                                     [boolean]
#       --description                  The description is just a string that helps people understand the purpose of the package                                                [string]
#       --dev-container                Add a VSCode development environment (used for GitHub Codespaces) [default: false]                                                     [boolean]
#       --disable-tsconfig             Do not generate a `tsconfig.json` file (used by jsii projects since tsconfig.json is generated by the jsii compiler) [default: false]  [boolean]
#       --docgen                       Docgen by Typedoc [default: false]                                                                                                     [boolean]
#       --docs-directory               Docs directory [default: "docs"]                                                                                                        [string]
#       --entrypoint                   Module entrypoint (`main` in `package.json`) [default: "lib/index.js"]                                                                  [string]
#       --entrypoint-types             The .d.ts file that includes the type declarations for this module [default: .d.ts file derived from the project's entrypoint (usually
#                                      lib/index.d.ts)]                                                                                                                        [string]
#       --eslint                       Setup eslint [default: true]                                                                                                           [boolean]
#       --github                       Enable GitHub integration [default: true]                                                                                              [boolean]
#       --gitpod                       Add a Gitpod development environment [default: false]                                                                                  [boolean]
#       --homepage                     Package's Homepage / Website                                                                                                            [string]
#       --jest                         Setup jest unit tests [default: true]                                                                                                  [boolean]
#       --jsii-release-version         Version requirement of `publib` which is used to publish modules to npm [default: "latest"]                                             [string]
#       --libdir                       Typescript  artifacts output directory [default: "lib"]                                                                                 [string]
#       --license                      License's SPDX identifier [default: "Apache-2.0"]                                                                                       [string]
#       --licensed                     Indicates if a license should be added [default: true]                                                                                 [boolean]
#       --major-version                Major version to release from the default branch [default: Major version is not enforced]                                               [number]
#       --max-node-version             Minimum node.js version to require via `engines` (inclusive) [default: no max]                                                          [string]
#       --mergify                      Whether mergify should be enabled on this repository or not [default: true]                                                            [boolean]
#       --min-major-version            Minimal Major version to release [default: No minimum version is being enforced]                                                        [number]
#       --min-node-version             Minimum Node.js version to require via package.json `engines` (inclusive) [default: no "engines" specified]                             [string]
#       --mutable-build                Automatically update files modified during builds to pull-request branches [default: true]                                             [boolean]
#       --npm-access                   Access level of the npm package [default: for scoped packages (e.g. `foo@bar`), the default is
#                                      `NpmAccess.RESTRICTED`, for non-scoped packages, the default is
#                                      `NpmAccess.PUBLIC`]                                                                                                                     [string]
#       --npm-dist-tag                 The npmDistTag to use when publishing from the default branch [default: "latest"]                                                       [string]
#       --npmignore-enabled            Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs [default: true]                   [boolean]
#       --npm-registry                 The host name of the npm registry to publish to                                                                                         [string]
#       --npm-registry-url             The base URL of the npm package registry [default: "https://registry.npmjs.org"]                                                        [string]
#       --npm-token-secret             GitHub secret which contains the NPM token to use when publishing packages [default: "NPM_TOKEN"]                                       [string]
#       --outdir                       The root directory of the project [default: "."]                                                                                        [string]
#       --package                      Defines a `package` task that will produce an npm tarball under the artifacts directory (e.g. `dist`) [default: true]                  [boolean]
#       --package-manager              The Node Package Manager used to execute scripts [default: NodePackageManager.YARN]                                                     [string]
#       --package-name                 The "name" in package.json [default: defaults to project name]                                                                          [string]
#       --prerelease                   Bump versions from the default branch as pre-releases (e.g. "beta", "alpha", "pre") [default: normal semantic versions]                 [string]
#       --prettier                     Setup prettier [default: false]                                                                                                        [boolean]
#       --project-type                 Which type of project this is (library/app) [default: ProjectType.UNKNOWN]                                                              [string]
#       --projen-command               The shell command to use in order to run the projen CLI [default: "npx projen"]                                                         [string]
#       --projen-dev-dependency        Indicates of "projen" should be installed as a devDependency [default: true]                                                           [boolean]
#       --projenrc-js                  Generate (once) .projenrc.js (in JavaScript). Set to `false` in order to disable .projenrc.js generation [default: true if projenrcJson is
#                                      false]                                                                                                                                 [boolean]
#       --projenrc-json                Generate (once) .projenrc.json (in JSON). Set to `false` in order to disable .projenrc.json generation [default: false]                [boolean]
#       --projenrc-ts                  Use TypeScript for your projenrc file (`.projenrc.ts`) [default: false]                                                                [boolean]
#       --projen-token-secret          The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows [default: "PROJEN_GITHUB_TOKEN"]      [string]
#       --projen-version               Version of projen to install [default: Defaults to the latest version]                                                                  [string]
#       --publish-dry-run              Instead of actually publishing to package managers, just print the publishing command [default: false]                                 [boolean]
#       --publish-tasks                Define publishing tasks that can be executed manually as well as workflows [default: false]                                            [boolean]
#       --pull-request-template        Include a GitHub pull request template [default: true]                                                                                 [boolean]
#       --release                      Add release management to this project [default: true (false for subprojects)]                                                         [boolean]
#       --release-every-commit         Automatically release new versions every commit to one of branches in `releaseBranches` [default: true]                                [boolean]
#       --release-failure-issue        Create a github issue on every failed publishing task [default: false]                                                                 [boolean]
#       --release-failure-issue-label  The label to apply to issues indicating publish failures [default: "failed-release"]                                                    [string]
#       --release-schedule             CRON schedule to trigger new releases [default: no scheduled releases]                                                                  [string]
#       --release-tag-prefix           Automatically add the given prefix to release tags. Useful if you are releasing on multiple branches with overlapping version numbers [default:
#                                      no prefix]                                                                                                                              [string]
#       --release-to-npm               Automatically release to npm when new versions are introduced [default: false]                                                         [boolean]
#       --release-workflow             DEPRECATED: renamed to `release` [default: true if not a subproject]                                                                   [boolean]
#       --release-workflow-name        The name of the default release workflow [default: "Release"]                                                                           [string]
#       --renovatebot                  Use renovatebot to handle dependency upgrades [default: false]                                                                         [boolean]
#       --repository                   The repository is the location where the actual code for your package lives                                                             [string]
#       --repository-directory         If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in
#                                      which it lives                                                                                                                          [string]
#       --sample-code                  Generate one-time sample in `src/` and `test/` if there are no files there [default: true]                                             [boolean]
#       --srcdir                       Typescript sources directory [default: "src"]                                                                                           [string]
#       --stability                    Package's Stability                                                                                                                     [string]
#       --stale                        Auto-close of stale issues and pull request [default: false]                                                                           [boolean]
#       --testdir                      Jest tests directory. Tests files should be named `xxx.test.ts` [default: "test"]                                                       [string]
#       --tsconfig-dev-file            The name of the development tsconfig.json file [default: "tsconfig.dev.json"]                                                           [string]
#       --typescript-version           TypeScript version to use [default: "latest"]                                                                                           [string]
#       --vscode                       Enable VSCode integration [default: true]                                                                                              [boolean]
#       --workflow-container-image     Container image to use for GitHub workflows [default: default image]                                                                    [string]
#       --workflow-node-version        The node version to use in GitHub workflows [default: same as `minNodeVersion`]                                                         [string]
# 
# Required:
#       --default-release-branch  The name of the main release branch                                                                             [string] [required] [default: "main"]
#       --name                    This is the name of your project                                                                       [string] [required] [default: "ts-projen-src"]
# 
# Positionals:
#   PROJECT-TYPE-NAME  optional only when --from is used and there is a single project type in the external module                                                             [string]
# 
# Options:
#       --post      Run post-synthesis steps such as installing dependencies. Use --no-post to skip                                                           [boolean] [default: true]
#   -w, --watch     Keep running and resynthesize when projenrc changes                                                                                      [boolean] [default: false]
#       --debug     Debug logs                                                                                                                               [boolean] [default: false]
#       --rc        path to .projenrc.js file             [string] [default: "/Users/briancabbott/dev_space/TrueMark/XMatters/project-code/xmatters-client/ts-projen-src/.projenrc.js"]
#       --help      Show help                                                                                                                                                 [boolean]
#       --synth     Synthesize after creating .projenrc.js                                                                                                    [boolean] [default: true]
#       --comments  Include commented out options in .projenrc.js (use --no-comments to disable)                                                              [boolean] [default: true]
#   -f, --from      External jsii npm module to create project from. Supports any package spec supported by npm (such as "my-pack@^2.0")                                       [string]
#       --git       Run `git init` and create an initial commit (use --no-git to disable)                                                                     [boolean] [default: true]


exit 0 # Comment me to regenerate
npx projen new typescript --projenrc-ts